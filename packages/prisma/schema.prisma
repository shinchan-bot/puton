// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  USER
  VENDOR
  DELIVERY_PARTNER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id           Int      @id @default(autoincrement()) // Primary key
  name         String?
  email        String?  @unique
  phone        String   @unique
  avatar       String?
  userType     UserType @default(USER)
  gender       Gender?
  otp          Otp?
  accessToken  String?
  isActive     Boolean  @default(true)
  measurements Json?
  addressId    Int?     @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  //Relation to the other tables
  address         Address?          @relation(fields: [addressId], references: [id])
  wishlistItem    WishlistItem[]
  cartItem        CartItem[]
  order           Order[]
  store           Store[]
  product         Product[]
  delivery        Delivery[]
  userAvatarCache UserAvatarCache[]
  userAvatar      UserAvatar?

  @@map("users") // Optional: maps the model to the "users" table in PostgreSQL
}

model Otp {
  id        Int      @id @default(autoincrement()) // Primary key for the OTP table
  userId    Int      @unique
  otp       String // The OTP value
  phone     String   @unique
  createdAt DateTime @default(now()) // Timestamp of OTP creation
  expiresAt DateTime // Timestamp when the OTP expires

  user User @relation(fields: [userId], references: [id])

  @@map("otps") // Optional: maps the model to the "otps" table in PostgreSQL
}

model WishlistItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  quantity  Int
  productId Int

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Address {
  id          Int     @id @default(autoincrement())
  houseNumber String
  street      String
  locality    String
  city        String
  landmark    String?
  pinCode     String
  state       String
  country     String? @default("India")
  user        User?
}

model UserAvatar {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  userImage   String
  avatarImage String
  height      Float
  weight      Float
  waist       Float
  chest       Float
  cupSize     String?
  skinTone    String

  user        User @relation(fields: [userId], references: [id])
}

model UserAvatarCache {
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  CachedImage String?
  expiresAt   DateTime

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Order {
  id                 Int            @id @default(autoincrement())
  userId             Int
  storeAddressId     Int
  cartId             Int            @unique
  amount             String
  amountDecimal      Int
  gstPercentage      Float
  deliveryCharge     Int
  handlingCharge     Int
  finalAmount        String
  finalAmountDecimal Int
  paymentId          Int            @unique
  delivery           Delivery?
  orderItems         OrderedItems[]

  payments Payments @relation(fields: [paymentId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model OrderedItems {
  id        Int    @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  status    String

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}

model Delivery {
  id                Int   @id @default(autoincrement())
  deliveryPartnerId Int
  orderId           Int   @unique
  order             Order @relation(fields: [orderId], references: [id])

  DeliveryItems DeliveryItems[]
  user          User            @relation(fields: [deliveryPartnerId], references: [id])
}

model DeliveryItems {
  id         Int    @id @default(autoincrement())
  deliveryId Int
  productId  Int
  quantity   Int
  status     String

  product  Product  @relation(fields: [productId], references: [id])
  delivery Delivery @relation(fields: [deliveryId], references: [id])
}

model Payments {
  id    Int    @id @default(autoincrement())
  order Order?
}

model Store {
  id             Int       @id @default(autoincrement())
  userId         Int
  propertyNumber String
  storeName      String
  gstNumber      String
  storeAddressId Int       @unique
  product        Product[]

  storeAddress StoreAddress @relation(fields: [storeAddressId], references: [id])

  user User @relation(fields: [userId], references: [id])
}

model StoreAddress {
  id           Int     @id @default(autoincrement())
  street       String
  locality     String
  city         String
  landmark     String?
  pinCode      String
  state        String
  country      String? @default("India")
  //Think what is address_type
  address_type String

  store Store?
}

model Product {
  id                         Int    @id @default(autoincrement())
  productName                String
  userId                     Int
  storeId                    Int
  price                      String
  priceDecimalPosition       Int
  vendorDiscountPercentage   Float
  platformDiscountPercentage Float
  marginPercentage           Float
  brandId                    Int
  categoryId                 Int
  subcategoryId              Int
  inventoryId                Int    @unique

  orderedItems   OrderedItems[]
  productVariant ProductVariant[]
  inventory      Inventory        @relation(fields: [inventoryId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  store          Store            @relation(fields: [storeId], references: [id])
  brand          Brand            @relation(fields: [brandId], references: [id])
  category       Category         @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory      @relation(fields: [subcategoryId], references: [id])
  deliveryItems  DeliveryItems[]
  wishlistItem   WishlistItem[]
  cartItem       CartItem[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  brandName String
  product   Product[]
}

model Category {
  id      Int       @id @default(autoincrement())
  product Product[]
}

model Subcategory {
  id      Int       @id @default(autoincrement())
  product Product[]
}

model ProductVariant {
  id        Int @id @default(autoincrement())
  productId Int

  product Product @relation(fields: [productId], references: [id])
}

model Inventory {
  id Int @id @default(autoincrement())

  product Product?
}
